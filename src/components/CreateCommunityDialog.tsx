import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { supabase } from '@/integrations/supabase/client';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Card, CardContent } from '@/components/ui/card';
import { Loader2, Plus, Sparkles } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface CreateCommunityDialogProps {
  onCommunityCreated?: () => void;
  trigger?: React.ReactNode;
  asCard?: boolean;
}

const CreateCommunityDialog = ({ onCommunityCreated, trigger, asCard = false }: CreateCommunityDialogProps) => {
  const [open, setOpen] = useState(false);
  const [loading, setLoading] = useState(false);
  const [name, setName] = useState('');
  const [description, setDescription] = useState('');
  const [privacyLevel, setPrivacyLevel] = useState('private');
  const navigate = useNavigate();
  const { toast } = useToast();

  const handleCreate = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!name.trim()) {
      toast({
        title: "Error",
        description: "Please enter a community name",
        variant: "destructive"
      });
      return;
    }

    setLoading(true);

    try {
      // Get current user
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) throw new Error('Not authenticated');

      // Get user's internal ID
      const { data: userData, error: userError } = await supabase
        .from('users')
        .select('id')
        .eq('auth_user_id', user.id)
        .single();

      if (userError || !userData) {
        throw new Error('User not found');
      }

      // Create the community
      const { data: community, error: communityError } = await supabase
        .from('communities')
        .insert([{
          name: name.trim(),
          description: description.trim() || null,
          privacy_level: privacyLevel,
          created_by: userData.id,
          universal_id: '' // Will be auto-generated by trigger
        }])
        .select()
        .single();

      if (communityError) throw communityError;

      // Add creator as admin member
      const { error: memberError } = await supabase
        .from('community_members')
        .insert({
          community_id: community.id,
          user_id: userData.id,
          role: 'admin'
        });

      if (memberError) throw memberError;

      toast({
        title: "Success!",
        description: `${community.name} has been created. You're now the admin!`,
      });

      setOpen(false);
      setName('');
      setDescription('');
      setPrivacyLevel('private');

      if (onCommunityCreated) {
        onCommunityCreated();
      }

      // Navigate to the new community
      navigate(`/community/${community.id}`);
    } catch (error: any) {
      console.error('Error creating community:', error);
      toast({
        title: "Error",
        description: error.message || "Failed to create community",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  const defaultTrigger = asCard ? (
    <Card className="cursor-pointer hover:border-primary transition-all duration-300 border-dashed border-2 group hover:shadow-glow">
      <CardContent className="flex flex-col items-center justify-center h-full min-h-[280px] p-6">
        <div className="w-16 h-16 rounded-xl bg-primary/10 flex items-center justify-center mb-4 group-hover:bg-primary/20 transition-colors">
          <Plus className="w-8 h-8 text-primary" />
        </div>
        <h3 className="font-semibold text-lg mb-2 group-hover:text-primary transition-colors">Create Community</h3>
        <p className="text-sm text-muted-foreground text-center">
          Start your own community
        </p>
      </CardContent>
    </Card>
  ) : (
    <Button className="gradient-primary hover:shadow-glow transition-all duration-300">
      <Plus className="w-4 h-4 mr-2" />
      Create Community
    </Button>
  );

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        {trigger || defaultTrigger}
      </DialogTrigger>
      <DialogContent className="sm:max-w-[500px]">
        <DialogHeader>
          <DialogTitle className="flex items-center space-x-2">
            <Sparkles className="w-5 h-5 text-primary" />
            <span>Create Your Community</span>
          </DialogTitle>
          <DialogDescription>
            Start a new community and become its admin. You'll have full control to customize and manage it.
          </DialogDescription>
        </DialogHeader>
        
        <form onSubmit={handleCreate}>
          <div className="space-y-4 py-4">
            <div className="space-y-2">
              <Label htmlFor="name">Community Name *</Label>
              <Input
                id="name"
                placeholder="e.g., Crypto Enthusiasts"
                value={name}
                onChange={(e) => setName(e.target.value)}
                disabled={loading}
                maxLength={100}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="description">Description</Label>
              <Textarea
                id="description"
                placeholder="What's your community about?"
                value={description}
                onChange={(e) => setDescription(e.target.value)}
                disabled={loading}
                maxLength={500}
                rows={4}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="privacy">Privacy Level</Label>
              <Select value={privacyLevel} onValueChange={setPrivacyLevel} disabled={loading}>
                <SelectTrigger id="privacy">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="private">Private - Invite only</SelectItem>
                  <SelectItem value="public">Public - Anyone can join</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>

          <DialogFooter>
            <Button
              type="button"
              variant="ghost"
              onClick={() => setOpen(false)}
              disabled={loading}
            >
              Cancel
            </Button>
            <Button 
              type="submit" 
              disabled={loading}
              className="gradient-primary"
            >
              {loading ? (
                <>
                  <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                  Creating...
                </>
              ) : (
                <>
                  <Sparkles className="w-4 h-4 mr-2" />
                  Create Community
                </>
              )}
            </Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
};

export default CreateCommunityDialog;
